{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Assignment 6.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/divyanshbajpai/EIP4-Coursework/blob/master/Week-3/Assignment-3%5BUpdated%5D\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KkwXnw9OfHZl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras import backend as K\n",
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "% matplotlib inline\n",
        "np.random.seed(2017) \n",
        "from keras.models import Sequential\n",
        "from keras.layers.convolutional import Convolution2D, MaxPooling2D, SeparableConv2D \n",
        "from keras.layers import Activation, Flatten, Dense, Dropout, GlobalAveragePooling2D\n",
        "from keras.layers.normalization import BatchNormalization\n",
        "from keras.utils import np_utils\n",
        "from keras import regularizers"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NHpnoCHZfO8g",
        "colab_type": "code",
        "outputId": "9fd69de6-c536-430a-d841-40257458f6e2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "from keras.datasets import cifar10\n",
        "(train_features, train_labels), (test_features, test_labels) = cifar10.load_data()\n",
        "num_train, img_channels, img_rows, img_cols =  train_features.shape\n",
        "num_test, _, _, _ =  test_features.shape\n",
        "num_classes = len(np.unique(train_labels))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 11s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "14HyBUXdfS6G",
        "colab_type": "code",
        "outputId": "bd4108e8-d675-4eff-9763-3ad34dff1abd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 213
        }
      },
      "source": [
        "class_names = ['airplane','automobile','bird','cat','deer',\n",
        "               'dog','frog','horse','ship','truck']\n",
        "fig = plt.figure(figsize=(8,3))\n",
        "for i in range(num_classes):\n",
        "    ax = fig.add_subplot(2, 5, 1 + i, xticks=[], yticks=[])\n",
        "    idx = np.where(train_labels[:]==i)[0]\n",
        "    features_idx = train_features[idx,::]\n",
        "    img_num = np.random.randint(features_idx.shape[0])\n",
        "    im = features_idx[img_num]\n",
        "    ax.set_title(class_names[i])\n",
        "    plt.imshow(im)\n",
        "plt.show()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 576x216 with 10 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bmfsk76-fadV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_model_history(model_history):\n",
        "    fig, axs = plt.subplots(1,2,figsize=(15,5))\n",
        "    # summarize history for accuracy\n",
        "    axs[0].plot(range(1,len(model_history.history['acc'])+1),model_history.history['acc'])\n",
        "    axs[0].plot(range(1,len(model_history.history['val_acc'])+1),model_history.history['val_acc'])\n",
        "    axs[0].set_title('Model Accuracy')\n",
        "    axs[0].set_ylabel('Accuracy')\n",
        "    axs[0].set_xlabel('Epoch')\n",
        "    axs[0].set_xticks(np.arange(1,len(model_history.history['acc'])+1),len(model_history.history['acc'])/10)\n",
        "    axs[0].legend(['train', 'val'], loc='best')\n",
        "    # summarize history for loss\n",
        "    axs[1].plot(range(1,len(model_history.history['loss'])+1),model_history.history['loss'])\n",
        "    axs[1].plot(range(1,len(model_history.history['val_loss'])+1),model_history.history['val_loss'])\n",
        "    axs[1].set_title('Model Loss')\n",
        "    axs[1].set_ylabel('Loss')\n",
        "    axs[1].set_xlabel('Epoch')\n",
        "    axs[1].set_xticks(np.arange(1,len(model_history.history['loss'])+1),len(model_history.history['loss'])/10)\n",
        "    axs[1].legend(['train', 'val'], loc='best')\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YJMT4rjgfdZz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def accuracy(test_x, test_y, model):\n",
        "    result = model.predict(test_x)\n",
        "    predicted_class = np.argmax(result, axis=1)\n",
        "    true_class = np.argmax(test_y, axis=1)\n",
        "    num_correct = np.sum(predicted_class == true_class) \n",
        "    accuracy = float(num_correct)/result.shape[0]\n",
        "    return (accuracy * 100)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T5c5nDvxm6zR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_features = train_features.astype('float32')/255\n",
        "test_features = test_features.astype('float32')/255\n",
        "# convert class labels to binary class labels\n",
        "train_labels = np_utils.to_categorical(train_labels, num_classes)\n",
        "test_labels = np_utils.to_categorical(test_labels, num_classes)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cSOb2lkJfhVq",
        "colab_type": "code",
        "outputId": "e593a74b-27af-4ea5-cbda-79ff6f10c0be",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        }
      },
      "source": [
        "# Define the model\n",
        "model = Sequential()\n",
        "model.add(Convolution2D(48, 3, 3, border_mode='same', input_shape=(32, 32, 3)))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Convolution2D(48, 3, 3))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "model.add(Convolution2D(96, 3, 3, border_mode='same'))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Convolution2D(96, 3, 3))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "model.add(Convolution2D(192, 3, 3, border_mode='same'))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Convolution2D(192, 3, 3))\n",
        "model.add(Activation('relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(512))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(256))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(48, (3, 3), input_shape=(32, 32, 3..., padding=\"same\")`\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(48, (3, 3))`\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(96, (3, 3), padding=\"same\")`\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(96, (3, 3))`\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(192, (3, 3), padding=\"same\")`\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(192, (3, 3))`\n",
            "  app.launch_new_instance()\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wvVs5tC8mR6Q",
        "colab_type": "code",
        "outputId": "e26e86c0-22a8-4dcc-ecd8-4cd3c2ce4712",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 32, 32, 48)        1344      \n",
            "_________________________________________________________________\n",
            "activation_1 (Activation)    (None, 32, 32, 48)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 30, 30, 48)        20784     \n",
            "_________________________________________________________________\n",
            "activation_2 (Activation)    (None, 30, 30, 48)        0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 15, 15, 48)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 15, 15, 48)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 15, 15, 96)        41568     \n",
            "_________________________________________________________________\n",
            "activation_3 (Activation)    (None, 15, 15, 96)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 13, 13, 96)        83040     \n",
            "_________________________________________________________________\n",
            "activation_4 (Activation)    (None, 13, 13, 96)        0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 6, 6, 96)          0         \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 6, 6, 96)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 6, 6, 192)         166080    \n",
            "_________________________________________________________________\n",
            "activation_5 (Activation)    (None, 6, 6, 192)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 4, 4, 192)         331968    \n",
            "_________________________________________________________________\n",
            "activation_6 (Activation)    (None, 4, 4, 192)         0         \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 2, 2, 192)         0         \n",
            "_________________________________________________________________\n",
            "dropout_3 (Dropout)          (None, 2, 2, 192)         0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 768)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 512)               393728    \n",
            "_________________________________________________________________\n",
            "activation_7 (Activation)    (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dropout_4 (Dropout)          (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 256)               131328    \n",
            "_________________________________________________________________\n",
            "activation_8 (Activation)    (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dropout_5 (Dropout)          (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 10)                2570      \n",
            "=================================================================\n",
            "Total params: 1,172,410\n",
            "Trainable params: 1,172,410\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5oK_V7WyfsXX",
        "colab_type": "code",
        "outputId": "6e512d3d-9a2d-4be5-e4ad-1f746282f8a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "datagen = ImageDataGenerator(zoom_range=0.0, \n",
        "                             horizontal_flip=False)\n",
        "\n",
        "# train the model\n",
        "start = time.time()\n",
        "# Train the model\n",
        "model_info = model.fit_generator(datagen.flow(train_features, train_labels, batch_size = 128),\n",
        "                                 samples_per_epoch = train_features.shape[0], nb_epoch = 50, \n",
        "                                 validation_data = (test_features, test_labels), verbose=1)\n",
        "end = time.time()\n",
        "print (\"Model took %0.2f seconds to train\"%(end - start))\n",
        "# plot model history\n",
        "plot_model_history(model_info)\n",
        "# compute test accuracy\n",
        "print (\"Accuracy on test data is: %0.2f\"%accuracy(test_features, test_labels, model))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-bf95f9ffa1df>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m model_info = model.fit_generator(datagen.flow(train_features, train_labels, batch_size = 128),\n\u001b[0m\u001b[1;32m     10\u001b[0m                                  \u001b[0msamples_per_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_features\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnb_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m                                  validation_data = (test_features, test_labels), verbose=1)\n",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fylvlzQ2BC-E",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def maxpool(x, k=2, s=2, p='same'):\n",
        "  return MaxPooling2D(pool_size=k, strides=s, padding=p)(x)\n",
        "def avgpool(x, k=2, s=2, p='same'):\n",
        "  return AveragePooling2D(pool_size=k, strides=s, padding=p)(x)\n",
        "def gavgpool(x):\n",
        "  return GlobalAveragePooling2D()(x)\n",
        "def sepconv(x, f, k=3, s=1, p='same', d=1, a='relu'):\n",
        "  return SeparableConv2D(filters=f, kernel_size=k, strides=s, \n",
        "                padding=p, dilation_rate=d, activation=a)(x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lsauNt0z5buH",
        "colab_type": "code",
        "outputId": "08ac2cce-184f-467b-ebe8-88634a462d47",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "weight_decay=0.0001\n",
        "mymodel=Sequential()\n",
        "mymodel.add(SeparableConv2D(32,(3,3),strides=1,activation='relu',input_shape=(32, 32, 3),kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.05))\n",
        "\n",
        "mymodel.add(SeparableConv2D(64,(3,3),strides=1,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.05))\n",
        "\n",
        "mymodel.add(SeparableConv2D(64,(3,3),strides=1,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.05))\n",
        "\n",
        "mymodel.add(SeparableConv2D(64,(3,3),strides=2,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.1))\n",
        "\n",
        "mymodel.add(SeparableConv2D(128,(3,3),strides=1,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.1))\n",
        "\n",
        "mymodel.add(SeparableConv2D(128,(3,3),strides=1,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.1))\n",
        "\n",
        "mymodel.add(SeparableConv2D(128,(3,3),strides=2,activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.15))\n",
        "\n",
        "mymodel.add(SeparableConv2D(256,(3,3),strides=1,padding='same',activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.15))\n",
        "\n",
        "mymodel.add(SeparableConv2D(10,(3,3),strides=1,padding='same',activation='relu',kernel_regularizer=regularizers.l2(weight_decay)))\n",
        "mymodel.add(BatchNormalization())\n",
        "mymodel.add(Dropout(0.15))\n",
        "\n",
        "mymodel.add(GlobalAveragePooling2D())\n",
        "mymodel.add(Activation('softmax'))\n",
        "\n",
        "mymodel.summary()"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_25\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "separable_conv2d_211 (Separa (None, 30, 30, 32)        155       \n",
            "_________________________________________________________________\n",
            "batch_normalization_211 (Bat (None, 30, 30, 32)        128       \n",
            "_________________________________________________________________\n",
            "dropout_211 (Dropout)        (None, 30, 30, 32)        0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_212 (Separa (None, 28, 28, 64)        2400      \n",
            "_________________________________________________________________\n",
            "batch_normalization_212 (Bat (None, 28, 28, 64)        256       \n",
            "_________________________________________________________________\n",
            "dropout_212 (Dropout)        (None, 28, 28, 64)        0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_213 (Separa (None, 26, 26, 64)        4736      \n",
            "_________________________________________________________________\n",
            "batch_normalization_213 (Bat (None, 26, 26, 64)        256       \n",
            "_________________________________________________________________\n",
            "dropout_213 (Dropout)        (None, 26, 26, 64)        0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_214 (Separa (None, 12, 12, 64)        4736      \n",
            "_________________________________________________________________\n",
            "batch_normalization_214 (Bat (None, 12, 12, 64)        256       \n",
            "_________________________________________________________________\n",
            "dropout_214 (Dropout)        (None, 12, 12, 64)        0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_215 (Separa (None, 10, 10, 128)       8896      \n",
            "_________________________________________________________________\n",
            "batch_normalization_215 (Bat (None, 10, 10, 128)       512       \n",
            "_________________________________________________________________\n",
            "dropout_215 (Dropout)        (None, 10, 10, 128)       0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_216 (Separa (None, 8, 8, 128)         17664     \n",
            "_________________________________________________________________\n",
            "batch_normalization_216 (Bat (None, 8, 8, 128)         512       \n",
            "_________________________________________________________________\n",
            "dropout_216 (Dropout)        (None, 8, 8, 128)         0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_217 (Separa (None, 3, 3, 128)         17664     \n",
            "_________________________________________________________________\n",
            "batch_normalization_217 (Bat (None, 3, 3, 128)         512       \n",
            "_________________________________________________________________\n",
            "dropout_217 (Dropout)        (None, 3, 3, 128)         0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_218 (Separa (None, 3, 3, 256)         34176     \n",
            "_________________________________________________________________\n",
            "batch_normalization_218 (Bat (None, 3, 3, 256)         1024      \n",
            "_________________________________________________________________\n",
            "dropout_218 (Dropout)        (None, 3, 3, 256)         0         \n",
            "_________________________________________________________________\n",
            "separable_conv2d_219 (Separa (None, 3, 3, 10)          4874      \n",
            "_________________________________________________________________\n",
            "batch_normalization_219 (Bat (None, 3, 3, 10)          40        \n",
            "_________________________________________________________________\n",
            "dropout_219 (Dropout)        (None, 3, 3, 10)          0         \n",
            "_________________________________________________________________\n",
            "global_average_pooling2d_24  (None, 10)                0         \n",
            "_________________________________________________________________\n",
            "activation_24 (Activation)   (None, 10)                0         \n",
            "=================================================================\n",
            "Total params: 98,797\n",
            "Trainable params: 97,049\n",
            "Non-trainable params: 1,748\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_hnO6Zwo7-k3",
        "colab_type": "code",
        "outputId": "59525313-77bb-4711-fd53-49d57f83796c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.optimizers import Adam\n",
        "from keras.callbacks import LearningRateScheduler\n",
        "from keras.callbacks import *\n",
        "\n",
        "epoch=50\n",
        "batch_size=512\n",
        "\n",
        "#def scheduler(epoch, lr):\n",
        "#  return round((lr * 1/(1 + np.pi/100 * epoch)), 10)\n",
        "\n",
        "clr = CyclicLR(\n",
        "\tbase_lr=0.0005,\n",
        "\tmax_lr=0.09,\n",
        "\tstep_size= 811)\n",
        "\n",
        "mymodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "datagen = ImageDataGenerator(shear_range=0.1,zoom_range=0.1,horizontal_flip=True)\n",
        "\n",
        "#datagen.standardize(train_features)\n",
        "# train the model\n",
        "start = time.time()\n",
        "# Train the model\n",
        "\n",
        "model_info = mymodel.fit_generator(datagen.flow(train_features, train_labels, batch_size = batch_size),\n",
        "                                 samples_per_epoch = train_features.shape[0], nb_epoch = epoch, \n",
        "                                 validation_data = (test_features, test_labels),verbose=1,\n",
        "                                 callbacks=[clr])\n",
        "\n",
        "\n",
        "end = time.time()\n",
        "print (\"Model took %0.2f seconds to train\"%(end - start))\n",
        "# plot model history\n",
        "plot_model_history(model_info)\n",
        "# compute test accuracy\n",
        "print (\"Accuracy on test data is: %0.2f\"%accuracy(test_features, test_labels, mymodel))"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:29: UserWarning: The semantics of the Keras 2 argument `steps_per_epoch` is not the same as the Keras 1 argument `samples_per_epoch`. `steps_per_epoch` is the number of batches to draw from the generator at each epoch. Basically steps_per_epoch = samples_per_epoch/batch_size. Similarly `nb_val_samples`->`validation_steps` and `val_samples`->`steps` arguments have changed. Update your method calls accordingly.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:29: UserWarning: Update your `fit_generator` call to the Keras 2 API: `fit_generator(<keras_pre..., validation_data=(array([[[..., verbose=1, callbacks=[<__main__..., steps_per_epoch=97, epochs=50)`\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            " 3/97 [..............................] - ETA: 3:48 - loss: 2.3636 - acc: 0.0957"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/keras/callbacks.py:95: RuntimeWarning: Method (on_train_batch_end) is slow compared to the batch update (1.175537). Check your callbacks.\n",
            "  % (hook_name, delta_t_median), RuntimeWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "97/97 [==============================] - 30s 313ms/step - loss: 1.7464 - acc: 0.3628 - val_loss: 8.6142 - val_acc: 0.2507\n",
            "Epoch 2/50\n",
            "97/97 [==============================] - 23s 236ms/step - loss: 1.3544 - acc: 0.5144 - val_loss: 11.9366 - val_acc: 0.2261\n",
            "Epoch 3/50\n",
            "97/97 [==============================] - 23s 234ms/step - loss: 1.1803 - acc: 0.5839 - val_loss: 7.9828 - val_acc: 0.3201\n",
            "Epoch 4/50\n",
            "97/97 [==============================] - 23s 233ms/step - loss: 1.0568 - acc: 0.6305 - val_loss: 12.0696 - val_acc: 0.2097\n",
            "Epoch 5/50\n",
            "97/97 [==============================] - 23s 232ms/step - loss: 0.9760 - acc: 0.6612 - val_loss: 9.9583 - val_acc: 0.2566\n",
            "Epoch 6/50\n",
            "97/97 [==============================] - 23s 232ms/step - loss: 0.9072 - acc: 0.6856 - val_loss: 5.3364 - val_acc: 0.4435\n",
            "Epoch 7/50\n",
            "97/97 [==============================] - 23s 233ms/step - loss: 0.8649 - acc: 0.7015 - val_loss: 4.1829 - val_acc: 0.4987\n",
            "Epoch 8/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.8337 - acc: 0.7101 - val_loss: 6.7860 - val_acc: 0.3480\n",
            "Epoch 9/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.7942 - acc: 0.7244 - val_loss: 6.0088 - val_acc: 0.3696\n",
            "Epoch 10/50\n",
            "97/97 [==============================] - 23s 232ms/step - loss: 0.7465 - acc: 0.7432 - val_loss: 2.0076 - val_acc: 0.6178\n",
            "Epoch 11/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.6986 - acc: 0.7596 - val_loss: 2.0760 - val_acc: 0.5453\n",
            "Epoch 12/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.6520 - acc: 0.7756 - val_loss: 1.3541 - val_acc: 0.6626\n",
            "Epoch 13/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.6241 - acc: 0.7842 - val_loss: 0.9322 - val_acc: 0.7251\n",
            "Epoch 14/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5866 - acc: 0.7966 - val_loss: 1.1916 - val_acc: 0.6521\n",
            "Epoch 15/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5480 - acc: 0.8113 - val_loss: 0.6355 - val_acc: 0.7871\n",
            "Epoch 16/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5165 - acc: 0.8221 - val_loss: 0.5570 - val_acc: 0.8125\n",
            "Epoch 17/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4876 - acc: 0.8311 - val_loss: 0.5190 - val_acc: 0.8251\n",
            "Epoch 18/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4832 - acc: 0.8300 - val_loss: 0.7216 - val_acc: 0.7620\n",
            "Epoch 19/50\n",
            "97/97 [==============================] - 22s 229ms/step - loss: 0.5105 - acc: 0.8235 - val_loss: 0.6662 - val_acc: 0.7832\n",
            "Epoch 20/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5443 - acc: 0.8120 - val_loss: 0.7783 - val_acc: 0.7675\n",
            "Epoch 21/50\n",
            "97/97 [==============================] - 23s 233ms/step - loss: 0.5744 - acc: 0.8019 - val_loss: 1.3070 - val_acc: 0.6649\n",
            "Epoch 22/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5964 - acc: 0.7933 - val_loss: 1.2185 - val_acc: 0.7012\n",
            "Epoch 23/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.6150 - acc: 0.7883 - val_loss: 1.3921 - val_acc: 0.6675\n",
            "Epoch 24/50\n",
            "97/97 [==============================] - 23s 234ms/step - loss: 0.6266 - acc: 0.7820 - val_loss: 2.2713 - val_acc: 0.5919\n",
            "Epoch 25/50\n",
            "97/97 [==============================] - 22s 232ms/step - loss: 0.6290 - acc: 0.7837 - val_loss: 2.2132 - val_acc: 0.6162\n",
            "Epoch 26/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.6090 - acc: 0.7896 - val_loss: 1.4834 - val_acc: 0.6721\n",
            "Epoch 27/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5858 - acc: 0.7981 - val_loss: 0.9070 - val_acc: 0.7612\n",
            "Epoch 28/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5490 - acc: 0.8115 - val_loss: 0.8888 - val_acc: 0.7519\n",
            "Epoch 29/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5159 - acc: 0.8220 - val_loss: 0.7756 - val_acc: 0.7567\n",
            "Epoch 30/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4951 - acc: 0.8278 - val_loss: 0.7292 - val_acc: 0.7729\n",
            "Epoch 31/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4637 - acc: 0.8390 - val_loss: 0.5505 - val_acc: 0.8187\n",
            "Epoch 32/50\n",
            "97/97 [==============================] - 22s 232ms/step - loss: 0.4378 - acc: 0.8487 - val_loss: 0.5644 - val_acc: 0.8123\n",
            "Epoch 33/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4179 - acc: 0.8540 - val_loss: 0.4961 - val_acc: 0.8349\n",
            "Epoch 34/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.3899 - acc: 0.8631 - val_loss: 0.4837 - val_acc: 0.8373\n",
            "Epoch 35/50\n",
            "97/97 [==============================] - 23s 232ms/step - loss: 0.3996 - acc: 0.8605 - val_loss: 0.5186 - val_acc: 0.8278\n",
            "Epoch 36/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4238 - acc: 0.8531 - val_loss: 0.6532 - val_acc: 0.7946\n",
            "Epoch 37/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4449 - acc: 0.8471 - val_loss: 0.5947 - val_acc: 0.8126\n",
            "Epoch 38/50\n",
            "97/97 [==============================] - 23s 233ms/step - loss: 0.4795 - acc: 0.8342 - val_loss: 0.7441 - val_acc: 0.7769\n",
            "Epoch 39/50\n",
            "97/97 [==============================] - 22s 232ms/step - loss: 0.5003 - acc: 0.8254 - val_loss: 0.8224 - val_acc: 0.7743\n",
            "Epoch 40/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5187 - acc: 0.8192 - val_loss: 1.2494 - val_acc: 0.7122\n",
            "Epoch 41/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5423 - acc: 0.8104 - val_loss: 1.3617 - val_acc: 0.7034\n",
            "Epoch 42/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.5455 - acc: 0.8129 - val_loss: 1.3954 - val_acc: 0.6763\n",
            "Epoch 43/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.5333 - acc: 0.8164 - val_loss: 1.2624 - val_acc: 0.6923\n",
            "Epoch 44/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4964 - acc: 0.8289 - val_loss: 0.6795 - val_acc: 0.7971\n",
            "Epoch 45/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4815 - acc: 0.8327 - val_loss: 0.7124 - val_acc: 0.7888\n",
            "Epoch 46/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4552 - acc: 0.8412 - val_loss: 0.7959 - val_acc: 0.7668\n",
            "Epoch 47/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.4221 - acc: 0.8514 - val_loss: 0.5392 - val_acc: 0.8249\n",
            "Epoch 48/50\n",
            "97/97 [==============================] - 22s 231ms/step - loss: 0.4026 - acc: 0.8610 - val_loss: 0.5724 - val_acc: 0.8149\n",
            "Epoch 49/50\n",
            "97/97 [==============================] - 22s 232ms/step - loss: 0.3812 - acc: 0.8673 - val_loss: 0.5017 - val_acc: 0.8325\n",
            "Epoch 50/50\n",
            "97/97 [==============================] - 22s 230ms/step - loss: 0.3542 - acc: 0.8752 - val_loss: 0.4683 - val_acc: 0.8442\n",
            "Model took 1145.44 seconds to train\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1080x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Accuracy on test data is: 84.42\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f0eH_ORRB3uI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "outputId": "a8700b07-8ae5-40c6-c13f-d5ddf40aa14c"
      },
      "source": [
        "lr = clr.history['lr']\n",
        "loss = clr.history['loss']\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "print('LR range vs iteration')\n",
        "plt.plot(range(len(lr)), lr)\n",
        "plt.show()\n",
        "print('Loss vs LR')\n",
        "plt.plot(lr, loss)\n",
        "plt.show()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LR range vs iteration\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Loss vs LR\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nA2UllzAAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8z7lj0O-zgxX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.callbacks import *\n",
        "\n",
        "class CyclicLR(Callback):\n",
        "    \"\"\"This callback implements a cyclical learning rate policy (CLR).\n",
        "    The method cycles the learning rate between two boundaries with\n",
        "    some constant frequency, as detailed in this paper (https://arxiv.org/abs/1506.01186).\n",
        "    The amplitude of the cycle can be scaled on a per-iteration or \n",
        "    per-cycle basis.\n",
        "    This class has three built-in policies, as put forth in the paper.\n",
        "    \"triangular\":\n",
        "        A basic triangular cycle w/ no amplitude scaling.\n",
        "    \"triangular2\":\n",
        "        A basic triangular cycle that scales initial amplitude by half each cycle.\n",
        "    \"exp_range\":\n",
        "        A cycle that scales initial amplitude by gamma**(cycle iterations) at each \n",
        "        cycle iteration.\n",
        "    For more detail, please see paper.\n",
        "    \n",
        "    # Example\n",
        "        ```python\n",
        "            clr = CyclicLR(base_lr=0.001, max_lr=0.006,\n",
        "                                step_size=2000., mode='triangular')\n",
        "            model.fit(X_train, Y_train, callbacks=[clr])\n",
        "        ```\n",
        "    \n",
        "    Class also supports custom scaling functions:\n",
        "        ```python\n",
        "            clr_fn = lambda x: 0.5*(1+np.sin(x*np.pi/2.))\n",
        "            clr = CyclicLR(base_lr=0.001, max_lr=0.006,\n",
        "                                step_size=2000., scale_fn=clr_fn,\n",
        "                                scale_mode='cycle')\n",
        "            model.fit(X_train, Y_train, callbacks=[clr])\n",
        "        ```    \n",
        "    # Arguments\n",
        "        base_lr: initial learning rate which is the\n",
        "            lower boundary in the cycle.\n",
        "        max_lr: upper boundary in the cycle. Functionally,\n",
        "            it defines the cycle amplitude (max_lr - base_lr).\n",
        "            The lr at any cycle is the sum of base_lr\n",
        "            and some scaling of the amplitude; therefore \n",
        "            max_lr may not actually be reached depending on\n",
        "            scaling function.\n",
        "        step_size: number of training iterations per\n",
        "            half cycle. Authors suggest setting step_size\n",
        "            2-8 x training iterations in epoch.\n",
        "        mode: one of {triangular, triangular2, exp_range}.\n",
        "            Default 'triangular'.\n",
        "            Values correspond to policies detailed above.\n",
        "            If scale_fn is not None, this argument is ignored.\n",
        "        gamma: constant in 'exp_range' scaling function:\n",
        "            gamma**(cycle iterations)\n",
        "        scale_fn: Custom scaling policy defined by a single\n",
        "            argument lambda function, where \n",
        "            0 <= scale_fn(x) <= 1 for all x >= 0.\n",
        "            mode paramater is ignored \n",
        "        scale_mode: {'cycle', 'iterations'}.\n",
        "            Defines whether scale_fn is evaluated on \n",
        "            cycle number or cycle iterations (training\n",
        "            iterations since start of cycle). Default is 'cycle'.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, base_lr=0.001, max_lr=0.006, step_size=2000., mode='triangular',\n",
        "                 gamma=1., scale_fn=None, scale_mode='cycle'):\n",
        "        super(CyclicLR, self).__init__()\n",
        "\n",
        "        self.base_lr = base_lr\n",
        "        self.max_lr = max_lr\n",
        "        self.step_size = step_size\n",
        "        self.mode = mode\n",
        "        self.gamma = gamma\n",
        "        if scale_fn == None:\n",
        "            if self.mode == 'triangular':\n",
        "                self.scale_fn = lambda x: 1.\n",
        "                self.scale_mode = 'cycle'\n",
        "            elif self.mode == 'triangular2':\n",
        "                self.scale_fn = lambda x: 1/(2.**(x-1))\n",
        "                self.scale_mode = 'cycle'\n",
        "            elif self.mode == 'exp_range':\n",
        "                self.scale_fn = lambda x: gamma**(x)\n",
        "                self.scale_mode = 'iterations'\n",
        "        else:\n",
        "            self.scale_fn = scale_fn\n",
        "            self.scale_mode = scale_mode\n",
        "        self.clr_iterations = 0.\n",
        "        self.trn_iterations = 0.\n",
        "        self.history = {}\n",
        "\n",
        "        self._reset()\n",
        "\n",
        "    def _reset(self, new_base_lr=None, new_max_lr=None,\n",
        "               new_step_size=None):\n",
        "        \"\"\"Resets cycle iterations.\n",
        "        Optional boundary/step size adjustment.\n",
        "        \"\"\"\n",
        "        if new_base_lr != None:\n",
        "            self.base_lr = new_base_lr\n",
        "        if new_max_lr != None:\n",
        "            self.max_lr = new_max_lr\n",
        "        if new_step_size != None:\n",
        "            self.step_size = new_step_size\n",
        "        self.clr_iterations = 0.\n",
        "        \n",
        "    def clr(self):\n",
        "        cycle = np.floor(1+self.clr_iterations/(2*self.step_size))\n",
        "        x = np.abs(self.clr_iterations/self.step_size - 2*cycle + 1)\n",
        "        if self.scale_mode == 'cycle':\n",
        "            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(cycle)\n",
        "        else:\n",
        "            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(self.clr_iterations)\n",
        "        \n",
        "    def on_train_begin(self, logs={}):\n",
        "        logs = logs or {}\n",
        "\n",
        "        if self.clr_iterations == 0:\n",
        "            K.set_value(self.model.optimizer.lr, self.base_lr)\n",
        "        else:\n",
        "            K.set_value(self.model.optimizer.lr, self.clr())        \n",
        "            \n",
        "    def on_batch_end(self, epoch, logs=None):\n",
        "        \n",
        "        logs = logs or {}\n",
        "        self.trn_iterations += 1\n",
        "        self.clr_iterations += 1\n",
        "\n",
        "        self.history.setdefault('lr', []).append(K.get_value(self.model.optimizer.lr))\n",
        "        self.history.setdefault('iterations', []).append(self.trn_iterations)\n",
        "\n",
        "        for k, v in logs.items():\n",
        "            self.history.setdefault(k, []).append(v)\n",
        "        \n",
        "        K.set_value(self.model.optimizer.lr, self.clr())"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}